#!@PERL@

use strict;
use warnings;

use Getopt::Long;
use Try::Tiny;

BEGIN {
    if( defined($ENV{'SPSID_PERLLIBDIRS'}) ) {
        unshift(@INC, split(/,/, $ENV{'SPSID_PERLLIBDIRS'}));
    }
    else {
        unshift(@INC, split(/,/, @perllibdirs@));
    }
}

use SPSID::Client;

$| = 1;

sub print_usage {
    print STDERR ('Usage: ' . $0 . ' --url=URL --id=ID [options...]' . "\n",
                  SPSID::Client->getopt_help_string(),
                  "  --id=ID      SPSID object identifier to delete\n",
                  "\n");
    print STDERR ("This program deletes SPSID objects recursively.\n");    
}
    

my $client;

try {
    $client = SPSID::Client->new_from_getopt();
}
    catch {
        print STDERR "Error: " . $_ . "\n";
        print_usage();
        exit(1);
    };



my $id;

my $ok =  GetOptions('id=s' => \$id);

if( not $ok or not defined($id) or scalar(@ARGV) > 0 ) {
    print_usage();
    exit(1);
};


my $attr = $client->get_object($id);
print STDERR "Deleting the following object and all its contained objects:\n";

foreach my $name (sort keys %{$attr}) {
    print STDERR $name . ': ' . $attr->{$name} . "\n";
}

$client->delete_object($id);

print STDERR "Done\n";




    



    


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
