#!@PERL@

use strict;
use warnings;

use Getopt::Long;
use Try::Tiny;

BEGIN {
    if( defined($ENV{'SPSID_PERLLIBDIRS'}) ) {
        unshift(@INC, split(/,/, $ENV{'SPSID_PERLLIBDIRS'}));
    }
    else {
        unshift(@INC, split(/,/, @perllibdirs@));
    }
}

use SPSID::Client;


sub print_usage {
    print STDERR ('Usage: ' . $0 . ' [options...]' . "\n",
                  SPSID::Client->getopt_help_string(),
                  "\n");
    print STDERR SPSID::Client->cli_env_vars();
    print STDERR ("This program refreshes calculated attributes " .
                  "for all objects.\n");
}
    

my $client;

try {
    $client = SPSID::Client->new_from_getopt();
}
    catch {
        print STDERR "Error: " . $_ . "\n";
        print_usage();
        exit(1);
    };


my $ok =  GetOptions();

if( not $ok or scalar(@ARGV) > 0 ) {
    print_usage();
    exit(1);
};


$| = 1;

my $c_objects = 0;

update_contained_objects('NIL');

printf("\nUpdated %d objects\n", $c_objects);

exit(0);



sub update_contained_objects
{
    my $container = shift;

    my $ret = [];
    
    # recursively retrieve and update all contained objects

    foreach my $objclass ( @{$client->contained_classes($container)} ) {
        foreach my $obj ( @{$client->search_objects($container, $objclass)} ) {

            my $id = $obj->{'spsid.object.id'};
            $client->modify_object($id, {});

            $c_objects++;
            print('.');
            
            update_contained_objects($id);
        }
    }

    return $ret;
}


    



    


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
