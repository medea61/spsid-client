#!@PERL@

use strict;
use warnings;

use utf8;
use Getopt::Long;
use Try::Tiny;
use JSON;

BEGIN {
    if( defined($ENV{'SPSID_PERLLIBDIRS'}) ) {
        unshift(@INC, split(/,/, $ENV{'SPSID_PERLLIBDIRS'}));
    }
    else {
        unshift(@INC, split(/,/, @perllibdirs@));
    }
}

use SPSID::Client;

$| = 1;

sub print_usage
{
    print STDERR
        ('Usage: ' . $0 . ' --class=CLASS [options...]' . "\n",
         SPSID::Client->getopt_help_string(),
         "  --class=CLASS         Object class\n",
         "  --container=ID        Optional container ID\n",
         "  --attr=NAME:VALUE     Optional search criteria\n",
         "  --prefix=NAME:STRING  Optional search criteria\n",
         "  --prefix=:STRING      Prefix search by any attribute\n",
         "  --fulltext=STRING     Full-text substring search\n",
         "\n");
    print STDERR SPSID::Client->cli_env_vars();
    print STDERR
        ("This program searches SPSID objects. Without container, all\n",
         "matching objects are returned. Either exact match, or\n",
         "case-insensitive prefix search can narrow down the results\n");
};

my $client;

try {
    $client = SPSID::Client->new_from_getopt();
}
    catch {
        print STDERR "Error: " . $_ . "\n";
        print_usage();
        exit(1);
    };



my $objclass;
my $container;
my @attrfilters;
my $search_prefix;
my $fulltext_search;

my $ok =  GetOptions
    ('class=s' => \$objclass,
     'container=s' => \$container,
     'attr=s' => \@attrfilters,
     'prefix=s' => \$search_prefix,
     'fulltext=s' => \$fulltext_search,
    );


if( not $ok or not defined($objclass) or scalar(@ARGV) > 0 or
    ((scalar(@attrfilters) > 0) +
     defined($search_prefix) +
     defined($fulltext_search) > 1) ) {
    print_usage();
    exit(1);
};

    
my $result;

if( defined($search_prefix) ) {

    utf8::decode($search_prefix);
    
    if( $search_prefix =~ /^([a-z0-9._]+):(.+)/ ) {
        $result = $client->search_prefix($objclass, $1, $2);
    }
    elsif( $search_prefix =~ /^:(.+)/ ) {
        $result = $client->search_prefix($objclass, undef, $1);
    }
    else {        
        print STDERR "Invalid syntax for the prefix: $search_prefix\n";
        print_usage();
        exit(1);
    }
}
elsif( defined($fulltext_search) ) {
    
    utf8::decode($fulltext_search);
    $result = $client->search_fulltext($objclass, $fulltext_search);
    
}
else {
    my @args = ($container, $objclass);

    while( scalar(@attrfilters) ) {
        
        my $pair = shift @attrfilters;
        
        if( $pair !~ /^([a-z0-9._]+):(.+)/ ) {
            print STDERR "Invalid syntax for the attribute filter: $pair\n";
            print_usage();
            exit(1);
        }
        
        push(@args, $1, $2);
    }
    
    $result = $client->search_objects(@args);
}

binmode(STDOUT);
my $json = JSON->new->utf8(1)->pretty(1);
print $json->encode($result);


exit(0);


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
