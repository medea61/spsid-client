#!@PERL@

use strict;
use warnings;

use utf8;
use Getopt::Long;
use Try::Tiny;
use YAML ();

BEGIN {
    if( defined($ENV{'SPSID_PERLLIBDIRS'}) ) {
        unshift(@INC, split(/,/, $ENV{'SPSID_PERLLIBDIRS'}));
    }
    else {
        unshift(@INC, split(/,/, @perllibdirs@));
    }
}

use SPSID::Client;


sub print_usage {
    print STDERR ('Usage: ' . $0 . ' --in=FILE [options...]' . "\n",
                  SPSID::Client->getopt_help_string(),
                  "  --in=FILE      YAML file for import\n",
                  "\n");
    print STDERR SPSID::Client->cli_env_vars();
    print STDERR ("This program loads the SIAM database contents ",
                  "from a YAML file\n");    
}
    

my $client;

try {
    $client = SPSID::Client->new_from_getopt();
}
    catch {
        print STDERR "Error: " . $_ . "\n";
        print_usage();
        exit(1);
    };



my $infile;
my $obj_count = 0;

my $ok =  GetOptions('in=s' => \$infile);

if( not $ok or not defined($infile) or scalar(@ARGV) > 0 ) {
    print_usage();
    exit(1);
};

if( not -f $infile ) {
    print STDERR "No such file: $infile\n";
    exit(1);
}

my $data = eval { YAML::LoadFile($infile) };
if( $@ ) {
    print STDERR('Cannot load YAML data from ' . $infile . ': ' . $@);
    exit(1);
}

if( ref($data) ne 'ARRAY' ) {
    print STDERR('Top level is not a sequence in ' . $infile);
    exit(1);
}


my $root = $client->get_siam_root();

if( not defined($root) ) {
    print STDERR "The SIAM root object does not exist\n";
    exit(1);
}

my $schema = $client->get_schema();
my %objref_attribute;
my %reserved_refs;

foreach my $objclass (keys %{$schema}) {
    if( defined($schema->{$objclass}{'attr'}) ) {
        foreach my $name (keys %{$schema->{$objclass}{'attr'}}) {
            my $ref = $schema->{$objclass}{'attr'}{$name};

            if( defined($ref->{'objref'}) ) {
                $objref_attribute{$objclass}{$name} =
                    $ref->{'objref'};                
            }

            if( defined($ref->{'reserved_refs'}) ) {
                foreach my $attr_value (keys %{$ref->{'reserved_refs'}}) {
                    if( $ref->{'reserved_refs'}{$attr_value} ) {
                        $reserved_refs{$objclass}{$name}{$attr_value} = 1;
                    }
                }
            }
        }
    }
}


my %filter_attributes =
    ('_contains_' => 1,
     'siam.object.id' => 1,
     'siam.object.class' => 1,
     );

my %delayed_refs;
my %id_translation;

foreach my $obj (@{$data})
{
    import_object($obj, $root);
}

# all delayed references are NIL, and now we make them point to real objects

while( my ($import_id, $refs) = each %delayed_refs ) {

    my $id = $id_translation{$import_id};
    die('cannot find import ID: ' . $import_id) unless defined($id);
    
    my $mod_attr = {};
    
    while( my ($attr, $oldref) = each %{$refs} ) {
        
        my $newref = $id_translation{$oldref};
        die('cannot find import ID: ' . $oldref) unless defined($newref);

        $mod_attr->{$attr} = $newref;
    }
        
    $client->modify_object($id, $mod_attr);
}

print STDERR "Loaded $obj_count SIAM objects\n";
exit(0);


     
sub import_object
{
    my $obj = shift;
    my $container = shift;

    my $objclass = $obj->{'siam.object.class'};
    if( not defined($objclass) )
    {
        die('Import object does not have "siam.object.class"');
    }

    my $import_id = $obj->{'siam.object.id'};
    if( not defined($import_id) ) {
        die('Import object does not have "siam.object.id"');
    }

    # duplicate all attributes except the filtered ones, and remember
    # all object references for further update

    my $attr = {};
    while( my ($key, $val) = each %{$obj} )
    {
        utf8::decode($val);
        if( not $filter_attributes{$key} )
        {
            if( defined($objref_attribute{$objclass}{$key}) and
                not $reserved_refs{$objclass}{$key}{$val} )
            {
                $delayed_refs{$import_id}{$key} = $val;
                $attr->{$key} = 'NIL';
            }
            else {
                $attr->{$key} = $val;
            }
        }
    }

    if( not defined($attr->{'siam.object.complete'}) and
        index($objclass, 'SIAM::') == 0 ) {
        $attr->{'siam.object.complete'} = 1;
    }    

    $attr->{'spsid.object.container'} = $container;
        
    my $id = $client->create_object($objclass, $attr);
    $id_translation{$import_id} = $id;
        
    $obj_count++;

    if( defined($obj->{'_contains_'}) )
    {
        foreach my $contained_obj (@{$obj->{'_contains_'}})
        {
            import_object($contained_obj, $id);
        }
    }
}


    



    


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
