#!@PERL@

use strict;
use warnings;

use utf8;
use Getopt::Long;
use Try::Tiny;
use YAML ();

BEGIN {
    if( defined($ENV{'SPSID_PERLLIBDIRS'}) ) {
        unshift(@INC, split(/,/, $ENV{'SPSID_PERLLIBDIRS'}));
    }
    else {
        unshift(@INC, split(/,/, @perllibdirs@));
    }
}

use SPSID::Client;


sub print_usage {
    print STDERR ('Usage: ' . $0 . ' --url=URL [options...]' . "\n",
                  SPSID::Client->getopt_help_string(),
                  "\n");
    print STDERR SPSID::Client->cli_env_vars();
    print STDERR ("This program dumps a YAML file with all SIAM objects to " .
                  "the standard output.\n");    
}
    

my $client;

try {
    $client = SPSID::Client->new_from_getopt();
}
    catch {
        print STDERR "Error: " . $_ . "\n";
        print_usage();
        exit(1);
    };


my $ok =  GetOptions();

if( not $ok or scalar(@ARGV) > 0 ) {
    print_usage();
    exit(1);
};



my $root = $client->get_siam_root();

if( not defined($root) ) {
    print STDERR "The SIAM root object does not exist\n";
    exit(1);
}


my %filter_attributes =
    ('spsid.object.id' => 1,
     'spsid.object.class' => 1,
     'spsid.object.container' => 1,
     );

my $data = fetch_contained_objects($root);

print YAML::Dump($data);
exit(0);



sub fetch_contained_objects
{
    my $container = shift;

    my $ret = [];
    
    # recursively retrieve all contained objects

    foreach my $objclass ( @{$client->contained_classes($container)} ) {
        foreach my $obj ( @{$client->search_objects($container, $objclass)} ) {

            my $newobj = {};
            while( my ($name, $value) = each %{$obj} ) {
                if( not $filter_attributes{$name} ) {
                    $newobj->{$name} = $obj->{$name};
                }
            }
            
            $newobj->{'siam.object.id'} = $obj->{'spsid.object.id'};
            $newobj->{'siam.object.class'} = $obj->{'spsid.object.class'};
            
            my $contained = fetch_contained_objects($obj->{'spsid.object.id'});
            if( scalar(@{$contained}) > 0 ) {
                $newobj->{'_contains_'} = $contained;
            }

            push(@{$ret}, $newobj);
        }
    }

    return $ret;
}


    



    


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
