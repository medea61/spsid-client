# DO NOT EDIT THIS FILE
# All site-specific configuration should be stored in spsid_siteconfig.pl

if( defined($ENV{'SPSID_PERLLIBDIRS'}) ) {
    unshift(@INC, split(/,/, $ENV{'SPSID_PERLLIBDIRS'}));
}
else {
    unshift(@INC, split(/,/, @perllibdirs@));
}




$SPSID::Config::backend = 'SPSID::Backend::SQL';



$SPSID::Config::object_validators =
{ 'siam.object.complete' =>
  sub {
      my $attr = shift;
      if( $attr->{'spsid.object.class'} =~ /^SIAM/o ) {
          foreach my $name ('siam.object.complete') {
              if( not defined($attr->{$name}) ) {
                  die('Missing attribute: ' . $name .
                      ' in spsid.object.id=' . $attr->{'spsid.object.id'});
              }
          }
      }
  },
};


# spsid.object.id is not listed here because it's validated and created
# explicitly
$SPSID::Config::common_attributes =
{
 'spsid.object.class' =>
 {
  'mandatory' => 1,
 },
 'spsid.object.container' =>
 {
  'mandatory' => 1,
  'hidden' => 1,
 },
};


# Attribute properties:
#   mandatory => 1|0
#   unique => 1|0
#   descr => "description text"
#   hilite => 1|0
#   protected => 1|0
#   hidden => 1|0
#   dictionary => [list of possible values]
#   boolean => 1|0
#   insignificant => 1|0
#   default => "default value"
#   templatekey => {value => {attribute property hash}}
#   objref => "Classname"
#   reserved_refs => {attrval => 1, ...}

$SPSID::Config::class_attributes =
{
 'SIAM' =>
 {
  'single_instance' => 1,
  'root_object' => 1,
  'display' =>
  {
   'read_only' => 1,
  },
 },


 'SIAM::Contract' =>
 {
  'attr' =>
  {
   'siam.contract.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Contract number in the billing system',
   },
   'siam.contract.customer_name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Customer name',
   },
  },
  'contained_in' => {'SIAM' => 1},
  'display' =>
  {
   'class_descr' => 'Contracts',
   'sequence' => 110,
   'name_attr' => 'siam.contract.inventory_id',
  },
 },


 'SIAM::Service' =>
 {
  'attr' =>
  {
   'siam.svc.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Service ID in the billing system',
   },
   'siam.svc.type' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service type',
   },
   'siam.svc.product_name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service product name',
   },
  },
  'contained_in' => {'SIAM::Contract' => 1},
  'display' =>
  {
   'class_descr' => 'Services',
   'sequence' => 120,
   'name_attr' => 'siam.svc.inventory_id',
  },
 },


 'SIAM::ServiceUnit' =>
 {
  'attr' =>
  {
   'siam.svcunit.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Service Unit ID',
   },
   'siam.svcunit.type' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Unit type',
   },
   'siam.svcunit.name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Unit name',
   },
  },
  'contained_in' => {'SIAM::Service' => 1},
  'display' =>
  {
   'class_descr' => 'Service Units',
   'sequence' => 130,
   'name_attr' => 'siam.svcunit.name',
  },
 },

 
 'SIAM::ServiceComponent' =>
 {
  'attr' =>
  {
   'siam.svcc.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Service Component ID',
   },
   'siam.svcc.type' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Component type',
    'templatekey' =>
    {'IFMIB.Port' =>
     {
      'torrus.port.name' =>
      {
       'mandatory' => 1,
       'descr' => 'Device port name',
      },
      'torrus.port.nodeid' =>
      {
       'protected' => 1,
       'default' => 'Calculated automatically',
       'descr' => 'Unique NodeID value to be assigned to the interface',
      },
      'torrus.port.bandwidth' =>
      {
       'descr' => 'Service bandwidth in bit per second',
      },
     },
     'Power.PDU' =>
     {
      'torrus.power.nodeid' =>
      {
       'descr' => 'PDU NodeID',
      },
     },
    },
   },
   'siam.svcc.name' =>
   {
    'mandatory' => 1,
    'hilite' => 1,
    'descr' => 'Service Component name',
   },
   'siam.svcc.device_id' =>
   {
    'mandatory' => 1,
    'objref' =>  'SIAM::Device',
    'descr' => 'Associated device',
   },
  },
  'contained_in' => {'SIAM::ServiceUnit' => 1},
  'no_children' => 1,
  'display' =>
  {
   'class_descr' => 'Service Components',
   'sequence' => 140,
   'name_attr' => 'siam.svcc.name',
  },
 },


 'SIAM::Device' =>
 {
  'attr' =>
  {
   'siam.device.inventory_id' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'descr' => 'Device ID',
   },
   'siam.device.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
    'hilite' => 1,
    'descr' => => 'Device name',
   },
   'torrus.server' =>
   {
    'descr' => 'Name of a Torrus server',
   },
   'torrus.tree' =>
   {
    'descr' => 'Torrus tree name',
    'default' => 't01',
   },
   'snmp.managed' =>
   {
    'descr' => 'Check if the device is monitored via SNMP',
    'default' => '1',
    'boolean' => 1,
   },
   'snmp.host' =>
   {
    'descr' => 'DNS name or IP address for the device',
   },
   'snmp.version' =>
   {
    'descr' => 'SNMP version supported by device',
    'default' => '2c',
    'dictionary' => ['1', '2c'],
   },
   'snmp.community' =>
   {
    'descr' => 'SNMP community',
    'default' => 'public',
   },
   'snmp.timeout' =>
   {
    'descr' => 'SNMP request timeout, seconds',
    'default' => '3',
   },
   'snmp.retries' =>
   {
    'descr' => 'Number of SNMP request retries',
    'default' => '2',
   },
   'torrus.subtree_path' =>
   {
    'descr' => 'Subtree name for the device in Torrus',
   }
  },
  'contained_in' => {'SIAM' => 1},
  'no_children' => 1,
  'display' =>
  {
   'class_descr' => 'Devices',
   'sequence' => 150,
   'name_attr' => 'siam.device.name',
  },
 },

 
 'SIAM::AccessScope' =>
 {
  'attr' =>
  {
   'siam.scope.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
   'siam.scope.applies_to' =>
   {
    'mandatory' => 1,
   },
  },
  'contained_in' => {'SIAM' => 1},
 },
 

 'SIAM::ScopeMember' =>
 {
  'attr' =>
  {
   'siam.scmember.object_id' =>
   {
    'mandatory' => 1,
    'objref' => '*',
   },
  },
  'contained_in' => {'SIAM::AccessScope' => 1},
  'no_children' => 1,
 },

 
 'SIAM::User' =>
 {
  'attr' =>
  {
   'siam.user.uid' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
  },
  'contained_in' => {'SIAM' => 1},
 },


 'SIAM::Privilege' =>
 {
  'attr' =>
  {
   'siam.privilege.access_scope_id' =>
   {
    'mandatory' => 1,
    'objref' => 'SIAM::AccessScope',
    'reserved_refs' =>
    {
     'SIAM.SCOPE.ALL.CONTRACTS' => 1,
     'SIAM.SCOPE.ALL.ATTRIBUTES' => 1,
    },
   },
   'siam.privilege.type' =>
   {
    'mandatory' => 1,
   },
  },
  'contained_in' => {'SIAM::User' => 1},
  'no_children' => 1,
 },


 'SIAM::Attribute' =>
 {
  'attr' =>
  {
   'siam.attribute.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
  },
  'contained_in' => {'SIAM' => 1},
  'no_children' => 1,
 },


 'SIAM::Report' =>
 {
  'attr' =>
  {
   'siam.report.name' =>
   {
    'mandatory' => 1,
    'unique' => 1,
   },
   'siam.report.description' => 
   {
    'mandatory' => 1,
   },
   'siam.report.object_class' => 
   {
    'mandatory' => 1,
   },
   'siam.report.type' => 
   {
    'mandatory' => 1,
   },
   'siam.report.last_updated' => 
   {
    'mandatory' => 1,
   },
  },
 },


};


foreach my $objclass (keys %{$SPSID::Config::class_attributes}) {

    if( $objclass =~ /^SIAM/o ) {
        my $ref = $SPSID::Config::class_attributes->{$objclass};
        $ref->{'attr'}{'siam.object.complete'} =
        {
         'mandatory' => 1,
         'default' => '1',
         'boolean' => 1,
         'descr' => 'true if object is ready',
        }
    }
}







if( defined($ENV{'SPSID_SITECONFIG'}) ) {
    require $ENV{'SPSID_SITECONFIG'};
}
else {
    require '@siteconfdir@/spsid_siteconfig.pl';
}



1;


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
