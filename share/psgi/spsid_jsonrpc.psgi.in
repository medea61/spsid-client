
use strict;
use warnings;

BEGIN {
    if(defined($ENV{'SPSID_CONFIG'})) {
        require $ENV{'SPSID_CONFIG'};
    } else { require '@spsid_config_pl@'; }
}


use JSON::RPC::Dispatcher;
use SPSID;

# use Log::Any::Adapter ('File', '/tmp/plack_' . $$ . '.log');


my $spsid = SPSID->new();
$spsid->connect();


sub create_object
{
    my $plack_request = shift;
    my $objclass = shift;
    my $attr = shift;

    my $userid = $plack_request->user();
    if( defined($userid) ) {
        $spsid->user_id($userid);
    }

    $spsid->create_object($objclass, $attr);
    
    $spsid->clear_user_id;
}



sub modify_object
{
    my $plack_request = shift;
    my $id = shift;
    my $mod_attr = shift;

    my $userid = $plack_request->user();
    if( defined($userid) ) {
        $spsid->user_id($userid);
    }
    
    $spsid->modify_object($id, $mod_attr);
    
    $spsid->clear_user_id;
}



sub delete_object
{
    my $plack_request = shift;
    my $id = shift;

    my $userid = $plack_request->user();
    if( defined($userid) ) {
        $spsid->user_id($userid);
    }
    
    $spsid->delete_object($id);
    
    $spsid->clear_user_id;
}


sub get_object
{
    my $id = shift;

    return $spsid->get_object($id);    
}


sub search_objects
{
    my $container = shift;
    my $objclass = shift;

    return $spsid->search_objects($container, $objclass, @_);    
}


    
my $rpc = JSON::RPC::Dispatcher->new;

$rpc->register('create_object', \&create_object, { with_plack_request => 1 });
$rpc->register('modify_object', \&modify_object, { with_plack_request => 1 });
$rpc->register('delete_object', \&delete_object, { with_plack_request => 1 });
$rpc->register('get_object', \&get_object);
$rpc->register('search_objects', \&search_objects);

$rpc->register('ping', sub{return [@_]});

$rpc->to_app;


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
