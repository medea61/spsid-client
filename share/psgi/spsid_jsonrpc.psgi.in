
use strict;
use warnings;

BEGIN {
    if(defined($ENV{'SPSID_CONFIG'})) {
        require $ENV{'SPSID_CONFIG'};
    } else { require '@spsid_config_pl@'; }
}


use JSON::RPC::Dispatcher;
use SPSID;

use Log::Any::Adapter ('Stderr');


my $spsid = SPSID->new();
$spsid->connect();


sub create_object
{
    my $plack_request = shift;
    my %arg = @_;

    die('objclass required') unless defined $arg{'objclass'};
    die('attr required') unless defined $arg{'attr'};
    
    my $userid = $plack_request->user();
    if( defined($userid) ) {
        $spsid->user_id($userid);
    }

    my $id = $spsid->create_object($arg{'objclass'}, $arg{'attr'});
    
    $spsid->clear_user_id;
    return $id;
}



sub modify_object
{
    my $plack_request = shift;
    my %arg = @_;

    die('id required') unless defined $arg{'id'};
    die('mod_attr required') unless defined $arg{'mod_attr'};

    my $userid = $plack_request->user();
    if( defined($userid) ) {
        $spsid->user_id($userid);
    }
    
    $spsid->modify_object($arg{'id'}, $arg{'mod_attr'});
    
    $spsid->clear_user_id;
    return;
}



sub delete_object
{
    my $plack_request = shift;
    my %arg = @_;

    die('id required') unless defined $arg{'id'};

    my $userid = $plack_request->user();
    if( defined($userid) ) {
        $spsid->user_id($userid);
    }
    
    $spsid->delete_object($arg{'id'});
    
    $spsid->clear_user_id;
    return;
}


sub get_object
{
    my %arg = @_;
    die('id required') unless defined $arg{'id'};
    return $spsid->get_object($arg{'id'});    
}


sub search_objects
{
    my %arg = @_;
    
    die('container required') unless exists $arg{'container'};
    die('objclass required') unless defined $arg{'objclass'};

    my @search_attrs = ();
    if( defined($arg{'search_attrs'}) ) {
        die('search_attrs must be ARRAY') unless
            ref($arg{'search_attrs'}) eq 'ARRAY';
        
        @search_attrs = @{$arg{'search_attrs'}};
    }
        
    return $spsid->search_objects($arg{'container'},
                                  $arg{'objclass'},
                                  @search_attrs);
}


sub search_prefix
{
    my %arg = @_;
    
    die('objclass required') unless defined $arg{'objclass'};
    die('attr_name required') unless exists $arg{'attr_name'};
    die('attr_prefix required') unless defined $arg{'attr_prefix'};

    return $spsid->search_prefix($arg{'objclass'},
                                 $arg{'attr_name'},
                                 $arg{'attr_prefix'});
}


sub contained_classes
{
    my %arg = @_;    
    die('container required') unless defined $arg{'container'};
    return $spsid->contained_classes($arg{'container'});
}


sub get_schema
{
    return $spsid->get_schema();
}


    
my $rpc = JSON::RPC::Dispatcher->new;

$rpc->register('create_object', \&create_object, { with_plack_request => 1 });
$rpc->register('modify_object', \&modify_object, { with_plack_request => 1 });
$rpc->register('delete_object', \&delete_object, { with_plack_request => 1 });
$rpc->register('get_object', \&get_object);
$rpc->register('search_objects', \&search_objects);
$rpc->register('search_prefix', \&search_prefix);
$rpc->register('contained_classes', \&contained_classes);
$rpc->register('get_schema', \&get_schema);

$rpc->register('ping', sub{my %arg = @_; return \%arg});

$rpc->to_app;


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
